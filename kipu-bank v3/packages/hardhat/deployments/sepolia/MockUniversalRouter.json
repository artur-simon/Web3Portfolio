{
  "address": "0x048e105244da155131fe30687175bCe5b77f5705",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "commands",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "inputs",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rateE18",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08d7bc209a900fdb2e06b5a57c5f414e65430476adf74efd4969f7774ca38953",
  "receipt": {
    "to": null,
    "from": "0xBacF93E13554fEd15FDd3E3b5e7505401bB170D0",
    "contractAddress": "0x048e105244da155131fe30687175bCe5b77f5705",
    "transactionIndex": 73,
    "gasUsed": "830887",
    "logsBloom": "0x
    "blockHash": "0xb345710713e934126607aa5bd75fc1e54c99653be984cfd8dfbe83e3cdd4c8d9",
    "transactionHash": "0x08d7bc209a900fdb2e06b5a57c5f414e65430476adf74efd4969f7774ca38953",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 9512322,
        "transactionHash": "0x08d7bc209a900fdb2e06b5a57c5f414e65430476adf74efd4969f7774ca38953",
        "address": "0x048e105244da155131fe30687175bCe5b77f5705",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bacf93e13554fed15fdd3e3b5e7505401bb170d0"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0xb345710713e934126607aa5bd75fc1e54c99653be984cfd8dfbe83e3cdd4c8d9"
      }
    ],
    "blockNumber": 9512322,
    "cumulativeGasUsed": "11821240",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "41a2120003e0b944125caacedf98df87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateE18\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockUniversalRouter.sol\":\"MockUniversalRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MockUniversalRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MockUniversalRouter is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public exchangeRates;\\r\\n\\r\\n    event ExchangeRateSet(address indexed tokenIn, address indexed tokenOut, uint256 rate);\\r\\n    event SwapExecuted(address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    function setExchangeRate(address tokenIn, address tokenOut, uint256 rateE18) external onlyOwner {\\r\\n        exchangeRates[tokenIn][tokenOut] = rateE18;\\r\\n        emit ExchangeRateSet(tokenIn, tokenOut, rateE18);\\r\\n    }\\r\\n\\r\\n    function execute(bytes calldata commands, bytes[] calldata inputs) external payable {\\r\\n        require(commands.length == inputs.length, \\\"Length mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < commands.length; i++) {\\r\\n            uint8 command = uint8(commands[i]);\\r\\n            \\r\\n            if (command == 0x00) {\\r\\n                _executeV4Swap(inputs[i]);\\r\\n            } else {\\r\\n                revert(\\\"Unsupported command\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _executeV4Swap(bytes calldata input) internal {\\r\\n        (address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address recipient) = \\r\\n            abi.decode(input, (address, address, uint256, uint256, address));\\r\\n\\r\\n        require(amountIn > 0, \\\"Zero amount\\\");\\r\\n        require(exchangeRates[tokenIn][tokenOut] > 0, \\\"Exchange rate not set\\\");\\r\\n\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        uint256 tokenInDecimals = _getDecimals(tokenIn);\\r\\n        uint256 tokenOutDecimals = _getDecimals(tokenOut);\\r\\n        \\r\\n        uint256 amountOut = (amountIn * exchangeRates[tokenIn][tokenOut] * (10 ** tokenOutDecimals)) / \\r\\n                            ((10 ** tokenInDecimals) * 1e18);\\r\\n\\r\\n        require(amountOut >= minAmountOut, \\\"Insufficient output amount\\\");\\r\\n\\r\\n        IERC20(tokenOut).safeTransfer(recipient, amountOut);\\r\\n\\r\\n        emit SwapExecuted(tokenIn, tokenOut, amountIn, amountOut);\\r\\n    }\\r\\n\\r\\n    function _getDecimals(address token) internal view returns (uint256) {\\r\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n        require(success, \\\"Failed to get decimals\\\");\\r\\n        return abi.decode(data, (uint8));\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address token, uint256 amount) external onlyOwner {\\r\\n        IERC20(token).safeTransfer(owner(), amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x7daa87b9fffdb8983b827cf2a6f6ae903c2d537e77011dfb39c42f33db44764f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d9a806100a56000396000f3fe6080604052600436106100705760003560e01c8063782aaeea1161004e578063782aaeea146100ea5780638da5cb5b1461010a5780639e281a9814610132578063f2fde38b1461015257600080fd5b806324856bc314610075578063503fa44f1461008a578063715018a6146100d5575b600080fd5b610088610083366004610938565b610172565b005b34801561009657600080fd5b506100c26100a5366004610a12565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156100e157600080fd5b50610088610274565b3480156100f657600080fd5b50610088610105366004610a4b565b610288565b34801561011657600080fd5b506000546040516001600160a01b0390911681526020016100cc565b34801561013e57600080fd5b5061008861014d366004610a8c565b6102f1565b34801561015e57600080fd5b5061008861016d366004610ab8565b610323565b8281146101b85760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b60448201526064015b60405180910390fd5b60005b8381101561026d5760008585838181106101d7576101d7610ad5565b919091013560f81c915050600081900361021c5761021784848481811061020057610200610ad5565b90506020028101906102129190610aeb565b610361565b61025a565b60405162461bcd60e51b8152602060048201526013602482015272155b9cdd5c1c1bdc9d19590818dbdb5b585b99606a1b60448201526064016101af565b508061026581610b4f565b9150506101bb565b5050505050565b61027c61058a565b61028660006105b7565b565b61029061058a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527ffda5f3c763773db764875ece48aacb54b5cb44dc12489b81299f3c49bf6bc81d910160405180910390a3505050565b6102f961058a565b61031f61030e6000546001600160a01b031690565b6001600160a01b0384169083610607565b5050565b61032b61058a565b6001600160a01b03811661035557604051631e4fbdf760e01b8152600060048201526024016101af565b61035e816105b7565b50565b60008080808061037386880188610b68565b94509450945094509450600083116103bb5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016101af565b6001600160a01b038086166000908152600160209081526040808320938816835292905220546104255760405162461bcd60e51b8152602060048201526015602482015274115e18da185b99d9481c985d19481b9bdd081cd95d605a1b60448201526064016101af565b61043a6001600160a01b03861633308661066b565b6000610445866106aa565b90506000610452866106aa565b9050600061046183600a610cab565b61047390670de0b6b3a7640000610cb7565b61047e83600a610cab565b6001600160a01b03808b166000908152600160209081526040808320938d16835292905220546104ae9089610cb7565b6104b89190610cb7565b6104c29190610cce565b9050848110156105145760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016101af565b6105286001600160a01b0388168583610607565b866001600160a01b0316886001600160a01b03167fdd36740e2a012d93061a0d99eaa9107860955de4e90027d3cf465a055026c4078884604051610576929190918252602082015260400190565b60405180910390a350505050505050505050565b6000546001600160a01b031633146102865760405163118cdaa760e01b81523360048201526024016101af565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383811660248301526044820183905261066691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061079a565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526106a49186918216906323b872dd90608401610634565b50505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916106f09190610cf0565b600060405180830381855afa9150503d806000811461072b576040519150601f19603f3d011682016040523d82523d6000602084013e610730565b606091505b50915091508161077b5760405162461bcd60e51b81526020600482015260166024820152754661696c656420746f2067657420646563696d616c7360501b60448201526064016101af565b8080602001905181019061078f9190610d1f565b60ff16949350505050565b60006107af6001600160a01b038416836107fd565b905080516000141580156107d45750808060200190518101906107d29190610d42565b155b1561066657604051635274afe760e01b81526001600160a01b03841660048201526024016101af565b606061080b83836000610814565b90505b92915050565b6060814710156108395760405163cd78605960e01b81523060048201526024016101af565b600080856001600160a01b031684866040516108559190610cf0565b60006040518083038185875af1925050503d8060008114610892576040519150601f19603f3d011682016040523d82523d6000602084013e610897565b606091505b50915091506108a78683836108b3565b925050505b9392505050565b6060826108c8576108c38261090f565b6108ac565b81511580156108df57506001600160a01b0384163b155b1561090857604051639996b31560e01b81526001600160a01b03851660048201526024016101af565b50806108ac565b80511561091f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000806000806040858703121561094e57600080fd5b843567ffffffffffffffff8082111561096657600080fd5b818701915087601f83011261097a57600080fd5b81358181111561098957600080fd5b88602082850101111561099b57600080fd5b6020928301965094509086013590808211156109b657600080fd5b818701915087601f8301126109ca57600080fd5b8135818111156109d957600080fd5b8860208260051b85010111156109ee57600080fd5b95989497505060200194505050565b6001600160a01b038116811461035e57600080fd5b60008060408385031215610a2557600080fd5b8235610a30816109fd565b91506020830135610a40816109fd565b809150509250929050565b600080600060608486031215610a6057600080fd5b8335610a6b816109fd565b92506020840135610a7b816109fd565b929592945050506040919091013590565b60008060408385031215610a9f57600080fd5b8235610aaa816109fd565b946020939093013593505050565b600060208284031215610aca57600080fd5b81356108ac816109fd565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610b0257600080fd5b83018035915067ffffffffffffffff821115610b1d57600080fd5b602001915036819003821315610b3257600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201610b6157610b61610b39565b5060010190565b600080600080600060a08688031215610b8057600080fd5b8535610b8b816109fd565b94506020860135610b9b816109fd565b935060408601359250606086013591506080860135610bb9816109fd565b809150509295509295909350565b600181815b80851115610c02578160001904821115610be857610be8610b39565b80851615610bf557918102915b93841c9390800290610bcc565b509250929050565b600082610c195750600161080e565b81610c265750600061080e565b8160018114610c3c5760028114610c4657610c62565b600191505061080e565b60ff841115610c5757610c57610b39565b50506001821b61080e565b5060208310610133831016604e8410600b8410161715610c85575081810a61080e565b610c8f8383610bc7565b8060001904821115610ca357610ca3610b39565b029392505050565b600061080b8383610c0a565b808202811582820484141761080e5761080e610b39565b600082610ceb57634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b81811015610d115760208186018101518583015201610cf7565b506000920191825250919050565b600060208284031215610d3157600080fd5b815160ff811681146108ac57600080fd5b600060208284031215610d5457600080fd5b815180151581146108ac57600080fdfea2646970667358221220bc269e9d5a43aa195d50f171a461e24ed8655b8d68064379a30c2751673d7ed364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063782aaeea1161004e578063782aaeea146100ea5780638da5cb5b1461010a5780639e281a9814610132578063f2fde38b1461015257600080fd5b806324856bc314610075578063503fa44f1461008a578063715018a6146100d5575b600080fd5b610088610083366004610938565b610172565b005b34801561009657600080fd5b506100c26100a5366004610a12565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156100e157600080fd5b50610088610274565b3480156100f657600080fd5b50610088610105366004610a4b565b610288565b34801561011657600080fd5b506000546040516001600160a01b0390911681526020016100cc565b34801561013e57600080fd5b5061008861014d366004610a8c565b6102f1565b34801561015e57600080fd5b5061008861016d366004610ab8565b610323565b8281146101b85760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b60448201526064015b60405180910390fd5b60005b8381101561026d5760008585838181106101d7576101d7610ad5565b919091013560f81c915050600081900361021c5761021784848481811061020057610200610ad5565b90506020028101906102129190610aeb565b610361565b61025a565b60405162461bcd60e51b8152602060048201526013602482015272155b9cdd5c1c1bdc9d19590818dbdb5b585b99606a1b60448201526064016101af565b508061026581610b4f565b9150506101bb565b5050505050565b61027c61058a565b61028660006105b7565b565b61029061058a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527ffda5f3c763773db764875ece48aacb54b5cb44dc12489b81299f3c49bf6bc81d910160405180910390a3505050565b6102f961058a565b61031f61030e6000546001600160a01b031690565b6001600160a01b0384169083610607565b5050565b61032b61058a565b6001600160a01b03811661035557604051631e4fbdf760e01b8152600060048201526024016101af565b61035e816105b7565b50565b60008080808061037386880188610b68565b94509450945094509450600083116103bb5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016101af565b6001600160a01b038086166000908152600160209081526040808320938816835292905220546104255760405162461bcd60e51b8152602060048201526015602482015274115e18da185b99d9481c985d19481b9bdd081cd95d605a1b60448201526064016101af565b61043a6001600160a01b03861633308661066b565b6000610445866106aa565b90506000610452866106aa565b9050600061046183600a610cab565b61047390670de0b6b3a7640000610cb7565b61047e83600a610cab565b6001600160a01b03808b166000908152600160209081526040808320938d16835292905220546104ae9089610cb7565b6104b89190610cb7565b6104c29190610cce565b9050848110156105145760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016101af565b6105286001600160a01b0388168583610607565b866001600160a01b0316886001600160a01b03167fdd36740e2a012d93061a0d99eaa9107860955de4e90027d3cf465a055026c4078884604051610576929190918252602082015260400190565b60405180910390a350505050505050505050565b6000546001600160a01b031633146102865760405163118cdaa760e01b81523360048201526024016101af565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383811660248301526044820183905261066691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061079a565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526106a49186918216906323b872dd90608401610634565b50505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916106f09190610cf0565b600060405180830381855afa9150503d806000811461072b576040519150601f19603f3d011682016040523d82523d6000602084013e610730565b606091505b50915091508161077b5760405162461bcd60e51b81526020600482015260166024820152754661696c656420746f2067657420646563696d616c7360501b60448201526064016101af565b8080602001905181019061078f9190610d1f565b60ff16949350505050565b60006107af6001600160a01b038416836107fd565b905080516000141580156107d45750808060200190518101906107d29190610d42565b155b1561066657604051635274afe760e01b81526001600160a01b03841660048201526024016101af565b606061080b83836000610814565b90505b92915050565b6060814710156108395760405163cd78605960e01b81523060048201526024016101af565b600080856001600160a01b031684866040516108559190610cf0565b60006040518083038185875af1925050503d8060008114610892576040519150601f19603f3d011682016040523d82523d6000602084013e610897565b606091505b50915091506108a78683836108b3565b925050505b9392505050565b6060826108c8576108c38261090f565b6108ac565b81511580156108df57506001600160a01b0384163b155b1561090857604051639996b31560e01b81526001600160a01b03851660048201526024016101af565b50806108ac565b80511561091f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000806000806040858703121561094e57600080fd5b843567ffffffffffffffff8082111561096657600080fd5b818701915087601f83011261097a57600080fd5b81358181111561098957600080fd5b88602082850101111561099b57600080fd5b6020928301965094509086013590808211156109b657600080fd5b818701915087601f8301126109ca57600080fd5b8135818111156109d957600080fd5b8860208260051b85010111156109ee57600080fd5b95989497505060200194505050565b6001600160a01b038116811461035e57600080fd5b60008060408385031215610a2557600080fd5b8235610a30816109fd565b91506020830135610a40816109fd565b809150509250929050565b600080600060608486031215610a6057600080fd5b8335610a6b816109fd565b92506020840135610a7b816109fd565b929592945050506040919091013590565b60008060408385031215610a9f57600080fd5b8235610aaa816109fd565b946020939093013593505050565b600060208284031215610aca57600080fd5b81356108ac816109fd565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610b0257600080fd5b83018035915067ffffffffffffffff821115610b1d57600080fd5b602001915036819003821315610b3257600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201610b6157610b61610b39565b5060010190565b600080600080600060a08688031215610b8057600080fd5b8535610b8b816109fd565b94506020860135610b9b816109fd565b935060408601359250606086013591506080860135610bb9816109fd565b809150509295509295909350565b600181815b80851115610c02578160001904821115610be857610be8610b39565b80851615610bf557918102915b93841c9390800290610bcc565b509250929050565b600082610c195750600161080e565b81610c265750600061080e565b8160018114610c3c5760028114610c4657610c62565b600191505061080e565b60ff841115610c5757610c57610b39565b50506001821b61080e565b5060208310610133831016604e8410600b8410161715610c85575081810a61080e565b610c8f8383610bc7565b8060001904821115610ca357610ca3610b39565b029392505050565b600061080b8383610c0a565b808202811582820484141761080e5761080e610b39565b600082610ceb57634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b81811015610d115760208186018101518583015201610cf7565b506000920191825250919050565b600060208284031215610d3157600080fd5b815160ff811681146108ac57600080fd5b600060208284031215610d5457600080fd5b815180151581146108ac57600080fdfea2646970667358221220bc269e9d5a43aa195d50f171a461e24ed8655b8d68064379a30c2751673d7ed364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MockUniversalRouter.sol:MockUniversalRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 851,
        "contract": "contracts/MockUniversalRouter.sol:MockUniversalRouter",
        "label": "exchangeRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}